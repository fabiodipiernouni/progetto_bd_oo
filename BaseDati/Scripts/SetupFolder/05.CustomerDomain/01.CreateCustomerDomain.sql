-- convezione nomi constraint: <Ck|Uk|Fk|Pk|WeakRel(fk con on delete cascade)><NomeTabella><Vincolo|NomeColonna>
-- convezione nomi: non si usano underscore e i nomi sono in camelcase

/*
    Nome: Cliente
    Descrizione: contiene i dati del cliente che effettua l'ordine
 */
create table Cliente
(
    IdCliente integer generated by default on null as identity not null,
    Nome VARCHAR2(64 byte) not null, -- se valorizzato RagioneSociale rappresenta il nome del referente
    Cognome VARCHAR2(64 byte) not null, -- se valorizzato RagioneSociale rappresenta il cognome del referente
    RagioneSociale VARCHAR2(64 byte),
    Email    VARCHAR2(64 byte) not null unique,
    CodiceFiscale VARCHAR2(16 byte), -- ammette null ma i valori sono unique
    PartitaIVA VARCHAR2(16 byte), -- ammette null ma i valori sono unique
    constraint PKCliente primary key (IDCliente),
    --uno tra CodiceFiscale e partitaIVA deve essere valorizzato
    constraint CkClienteCForPIVA check ((CodiceFiscale is not null and PartitaIVA is null) or (CodiceFiscale is null and PartitaIVA is not null)),
    constraint UkClienteCodiceFiscale unique (CodiceFiscale),
    constraint UkClientePartitaIVA unique (PartitaIVA),
    -- se è valorizzata RagioneSociale allora deve esserlo anche PartitaIVA
    constraint CkClienteRagioneSociale check (RagioneSociale is null or PartitaIVA is not null)
);

/*
    Nome: OrdineCliente
    Descrizione: contiene i dati dell'ordine effettuato dal cliente
 */
create table OrdineCliente
(
    Id integer generated by default on null as identity not null,
    DataOrdine DATE not null,
    ImportoTotale NUMBER(10,2) not null,
	DataInizioLavorazione date,
	DataFineLavorazione date,
    Stato VARCHAR2(64 byte) not null, -- Stato dell'ordine: Bozza, Confermato, Completato, InLavorazione, Lavorato
    IDCliente int not null,
    IdIndirizzoFatturazione int not null,
    IdIndirizzoSpedizione int, -- valorizzato se diverso da indirizzo di fatturazione
    constraint PkOrdineCliente primary key (Id),
    constraint WeakRelOrdineClienteCliente foreign key (IDCliente) references Cliente (IDCliente) on delete cascade,
    constraint CkOrdineClienteStato check (Stato in ('Bozza', 'Confermato', 'Completato', 'InLavorazione', 'Lavorato')),
	constraint CkOrdineClienteDate check (DataInizioLavorazione is null and DataFineLavorazione is null or (DataInizioLavorazione is not null and (DataFineLavorazione is null or DataFineLavorazione >= DataInizioLavorazione))),
    constraint FkOrdineClienteIndirizzoFatturazione foreign key (IdIndirizzoFatturazione) references Indirizzo (Id),
    constraint FkOrdineClienteIndirizzoSpedizione foreign key (IdIndirizzoSpedizione) references Indirizzo (Id)
);

/*
    Nome: StatoOrdineClienteFiliale
    Descrizione:
        contiene lo stato dell'ordine per ogni filiale. Questa tabella è necesssaria perché per un singolo ordine la gestione dei prodotti ordinati
        è assegnata alle filiali in base alla giacenza in magazzino e alla filiale di riferimento del magazzino.
        La tabella viene popolata dal trigger CkCompletaDettaglioOrdine
    ESEMPIO:
        Supponendo un ordine di 3 prodotti, 2 di questi sono disponibili in magazzino della filiale A e 1 in magazzino della filiale B.
        La filiale A gestirà l'ordine in relazione ai primi 2 prodotti e l'ordine avrà un workflow di stato relativo solo a questi due prodotti.
        La filiale B gestirà l'ordine in relazione al terzo prodotto e l'ordine avrà un workflow di stato relativo solo a questo prodotto.
 */
create table StatoOrdineClienteFiliale
(
    Id integer generated by default on null as identity not null,
    IdOrdineCliente int not null,
    IdFiliale int not null,  -- ogni dettaglio è di competenza di una filiale sulla base della giacenza in magazzino
    Stato VARCHAR2(64 byte) not null, -- Stato dell'ordine: Completato, Packaging, Spedito, Consegnato
    constraint PkStatoOrdineClienteFiliale primary key (Id),
    constraint FkStatoOrdineClienteFilialeOrdineCliente foreign key (IdOrdineCliente) references OrdineCliente (Id) on delete cascade,
    constraint FkStatoOrdineClienteFilialeFiliale foreign key (IdFiliale) references Filiale (Id),
    constraint CkStatoOrdineClienteFilialeStato check (Stato in ('Completato', 'Packaging', 'Spedito', 'Consegnato'))
);

/*
    Nome: DettaglioOrdine
    Descrizione: contiene i dati dei prodotti ordinati e le relative quantità e la filiale di riferimento. La tabella viene popolata dal sistema
        che aggiorna la filiale di riferimento in base alla giacenza in magazzino
 */
create table DettaglioOrdine (
    Id integer generated by default on null as identity not null,
    IdOrdine int not null,
    IdProdotto int not null,
    Quantita int not null, -- deve essere maggiore di zero
    FlagCompletato char(1) default 'N' not null, -- Y se il dettaglio è stato completato, N altrimenti
    FlagQuantitaDisponibile char(1) default 'Y' not null, -- Y se la quantità richiesta è disponibile, N altrimenti
    constraint PkDettaglioOrdine primary key (Id),
    constraint WeakRelDettaglioOrdineIdOrdine foreign key (IdOrdine) references OrdineCliente (Id) on delete cascade,
    constraint FkDettaglioOrdineIdProdotto foreign key (IdProdotto) references CatalogoProdotti (Id),
    constraint CkDettaglioOrdineQuantita check (Quantita > 0),
    constraint CkDettaglioOrdineFlagCompletato check (FlagCompletato in ('Y', 'N')),
    constraint CkDettaglioOrdineFlagQuantitaDisponibile check (FlagQuantitaDisponibile in ('Y', 'N'))
);
/*
    Nome: LocationDettaglioOrdine
    Descrizione:
        contiene i dati della filiale e del magazzino di riferimento per ogni dettaglio ordine.
        La tabella viene popolata dal sistema (trigger WorkerCompletaDettaglioOrdine) che aggiorna la filiale di riferimento in base alla
        giacenza in magazzino
 */
create table LocationDettaglioOrdine (
    Id integer generated by default on null as identity not null,
    IdDettaglioOrdine integer not null,
    IdFilialeRiferimento integer not null,
    IdMagazzinoRiferimento integer not null,
    DataAssegnazione DATE default sysdate not null,
    constraint PkLocationDettaglioOrdine primary key (Id),
    constraint FkLocationDettaglioOrdineDettaglioOrdine foreign key (IdDettaglioOrdine) references DettaglioOrdine (Id) on delete cascade,
    constraint FkLocationDettaglioOrdineFiliale foreign key (IdFilialeRiferimento) references Filiale (Id)
);

-- convezione nomi constraint: <Ck|Uk|Fk|Pk|WeakRel(fk con on delete cascade)><NomeTabella><Vincolo|NomeColonna>
-- convezione nomi: non si usano underscore e i nomi sono in camelcase

